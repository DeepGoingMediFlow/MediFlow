import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Search, User, Users, Bed, AlertCircle, AlertTriangle, LogOut } from 'lucide-react';
import logoutIcon from '../assets/images/logout-icon.png';
import UserIcon from '../assets/images/user-icon.png';
import MainPage from '../Pages/MainPage';

import EmergencyModal from './EmergencyModal';
import DischargeModal from './DischargeModal';

import '../Style/MainPage.css';
import '../Style/EmergencyRoom.css';
import axios from "axios";

const EmergencyRoom = ({ hideHeader = false }) => {
  const [searchTerm, setSearchTerm] = useState('');

  // Î™®Îã¨ ÏÉÅÌÉú Í¥ÄÎ¶¨
  const [showPatientModal, setShowPatientModal] = useState(false);
  const [showDischargeModal, setShowDischargeModal] = useState(false);
  const [selectedBed, setSelectedBed] = useState(null);

  // ÎåÄÍ∏∞ ÌôòÏûê Î∞±ÏóîÎìú Ïó∞Îèô 
  const [waitingPatients, setWaitingPatients] = useState([]);

  // Î≥ëÏÉÅ ÏÉÅÌÉú Î∞±ÏóîÎìú Ïó∞Îèô 
  const [bedStatuses, setBedStatuses] = useState({});
  const [bedLoading, setBedLoading] = useState(true);

  // ÎåÄÍ∏∞ ÏãúÍ∞Ñ Ìï®Ïàò
  const calculateWaitingTime = () => {
    const minutes = Math.floor(Math.random() * 120) + 10;
    return `${minutes}Î∂Ñ`;
  };


  // Î≥ëÏÉÅ ÏÉÅÌÉú Í∞ÄÏ†∏Ïò§Í∏∞ - Î∞±ÏóîÎìú Ïó∞Îèô (Ï†ïÌôïÌïú ÌïÑÎìúÎ™Ö ÏÇ¨Ïö©)
  const getBedStatuses = async () => {
    try {
      setBedLoading(true);

      console.log('Î∞±ÏóîÎìúÏóêÏÑú Î≥ëÏÉÅ ÏÉÅÌÉú Ï°∞Ìöå ÏãúÏûë...');
      const response = await axios.get('http://localhost:8081/api/patients');

      // Î∞±ÏóîÎìú ÏùëÎãµ Ï†ÑÏ≤¥ ÎîîÎ≤ÑÍπÖ
      console.log('Î∞±ÏóîÎìú ÏùëÎãµ Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞:', response.data);
      console.log('Ï¥ù ÌôòÏûê Ïàò:', response.data.length);

      const bedStatusMap = {};

      for (const patient of response.data) {
        // Í∞Å ÌôòÏûê Îç∞Ïù¥ÌÑ∞ ÏÉÅÏÑ∏ Î°úÍπÖ
        console.log('üë§ ÌôòÏûê Í∞úÎ≥Ñ Îç∞Ïù¥ÌÑ∞:', {
          pid: patient.pid,
          name: patient.name,
          bed: patient.bed,              // ‚Üê PatientSummaryDtoÏùò Ïã§Ï†ú ÌïÑÎìú
          bedNumber: patient.bedNumber,  // ‚Üê ÌòπÏãú Ïù¥ ÌïÑÎìúÎèÑ ÏûàÎäîÏßÄ ÌôïÏù∏
          acuity: patient.acuity,
          visitId: patient.visitId,
          Ï†ÑÏ≤¥Í∞ùÏ≤¥: patient
        });

        // PatientSummaryDtoÏóê ÎßûÎäî ÌïÑÎìúÎ™Ö ÏÇ¨Ïö© (bed Ïö∞ÏÑ†, bedNumberÎäî fallback)
        const bedNumber = patient.bed || patient.bedNumber;

        if (bedNumber) {
          console.log(`üè• Î≥ëÏÉÅ ${bedNumber}Ïóê ÌôòÏûê ${patient.name} Î∞∞Ïπò Î∞úÍ≤¨!`);

          bedStatusMap[bedNumber] = {
            patientId: patient.pid,
            patientName: patient.name,
            visitId: patient.visitId,
            ktas: patient.acuity,
            status: getBedStatusFromKTAS(patient.acuity),
            age: patient.age || 0,
            gender: patient.gender || 0,
            chiefComplaint: patient.chiefComplaint || 'Ï¶ùÏÉÅ ÌôïÏù∏ Ï§ë',
            diagnosis: patient.diagnosis || 'ÏßÑÎã® ÎåÄÍ∏∞',
            pain: patient.pain || 0,
            admissionTime: patient.admissionTime || new Date().toISOString(),
            arrivalTransport: patient.arrivalTransport || 'UNKNOWN'
          };
        } else {
          console.log(`‚è≥ ÌôòÏûê ${patient.name || patient.pid}Îäî ÎåÄÍ∏∞ Ï§ë (bed ÌïÑÎìú ÏóÜÏùå)`);
        }
      }

      console.log('ÏµúÏ¢Ö Î≥ëÏÉÅ ÏÉÅÌÉú Îßµ:', bedStatusMap);
      console.log('Ïã§Ï†ú Î∞∞ÏπòÎêú Î≥ëÏÉÅ Ïàò:', Object.keys(bedStatusMap).length);
      console.log('Î∞∞ÏπòÎêú Î≥ëÏÉÅ Î™©Î°ù:', Object.keys(bedStatusMap));

      setBedStatuses(bedStatusMap);

    } catch (error) {
      console.error('Î≥ëÏÉÅ ÏÉÅÌÉú Ï°∞Ìöå Ïã§Ìå®:', error);
      setBedStatuses({});
    } finally {
      setBedLoading(false);
    }
  };

  // KTAS Îì±Í∏âÏóê Îî∞Î•∏ Î≥ëÏÉÅ ÏÉÅÌÉú Í≤∞Ï†ï
  const getBedStatusFromKTAS = (ktas) => {
    switch (ktas) {
      case 1:
      case 2:
        return 'red';
      case 3:
        return 'yellow';
      case 4:
      case 5:
        return 'green';
      default:
        return 'empty';
    }
  }; 


  // ÎåÄÍ∏∞ ÌôòÏûê Î™©Î°ù Î∂àÎü¨Ïò§Í∏∞
  const getWaitingPatients = async () => {
    try {
      const response = await axios.get('http://localhost:8081/api/patients');

      const waitingOnly = response.data.filter(patient => !patient.bedNumber); 
      const transformedData = waitingOnly.map(patient => ({
        pid: patient.pid,
        name: patient.name || patient.patientName || patient.patient || `ÌôòÏûê ${patient.pid}`,
        age: patient.age,
        sex: patient.gender === 0 ? 'M' : 'F',
        ktas: patient.acuity,
        complaint: patient.chiefComplaint,
        waitingTime: calculateWaitingTime(),
        visitId: patient.visitId
      }));

      setWaitingPatients(transformedData);
    } catch (error) {
      console.error('ÎåÄÍ∏∞ ÌôòÏûê Î™©Î°ù Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®:', error);
      setWaitingPatients([]);
    }
  };

  // Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ Ïãú Îç∞Ïù¥ÌÑ∞ Î°úÎìú 
  useEffect(() => {
    getBedStatuses();
    getWaitingPatients();
  }, []);

  // Î≥ëÏÉÅ Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ®(5Î∂Ñ)
  useEffect(() => {
    const interval = setInterval(() => {
      getBedStatuses();
      getWaitingPatients();
    }, 300000);
    return () => clearInterval(interval);
  }, []);

  // Î≥ëÏÉÅ ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨
  const handleBedClick = (bed) => {
    const bedData = bedStatuses[bed.name];
    const hasPatient = bedData && bedData.patientName;
    if (!hasPatient) {
      // Îπà Î≥ëÏÉÅ ÌÅ¥Î¶≠ Ïãú - ÌôòÏûê Î∞∞Ïπò Î™®Îã¨ Ïó¥Í∏∞
      setSelectedBed({
        ...bed,
        bedData: null
      });
      setShowPatientModal(true);
    } else {
      // ÌôòÏûê ÏûàÎäî Î≥ëÏÉÅ ÌÅ¥Î¶≠ Ïãú - Ìá¥Ïã§ Î™®Îã¨ Ïó¥Í∏∞
      setSelectedBed({
        ...bed,
        bedData: bedData,
        patient: {
          name: bedData.patientName,
          visitId: bedData.visitId,
          ktas: bedData.ktas
        }
      });
      setShowDischargeModal(true);
    }
  };


  // ÌôòÏûê Î∞∞Ïπò Ï≤òÎ¶¨ - Îß§Í∞úÎ≥ÄÏàò ÏàòÏ†ï Î∞è Ï¶âÏãú UI ÏóÖÎç∞Ïù¥Ìä∏
  const handlePatientAssign = async (patient, bedName, newBedStatus) => {
    try {
      console.log(`ÌôòÏûê ${patient.name}ÏùÑ Î≥ëÏÉÅ ${bedName}Ïóê Î∞∞Ïπò ÏôÑÎ£å`);

      // Ï¶âÏãú UI ÏóÖÎç∞Ïù¥Ìä∏ - Î°úÏª¨ ÏÉÅÌÉúÏóê ÏÉà Î≥ëÏÉÅ Ï†ïÎ≥¥ Ï∂îÍ∞Ä
      setBedStatuses(prevStatuses => ({
        ...prevStatuses,
        [bedName]: newBedStatus
      }));


      // ÎåÄÍ∏∞ÌôòÏûê Î™©Î°ùÏóêÏÑú Ìï¥Îãπ ÌôòÏûê Ï†úÍ±∞
      setWaitingPatients(prevPatients =>
        prevPatients.filter(p => p.pid !== patient.pid)
      );

      // Î∞±ÏóîÎìú ÏÉàÎ°úÍ≥†Ïπ® (Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú Ïã§Ìñâ)
      setTimeout(async () => {
        await getWaitingPatients();
      }, 1000);

    } catch (error) {
      console.error('Î∞∞Ïπò ÌõÑ Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ® Ïã§Ìå®:', error);
    } finally {
      setShowPatientModal(false);
      setSelectedBed(null);
    }
  };

  // ÌôòÏûê Ìá¥Ïã§ Ï≤òÎ¶¨(DischargeModalÏóêÏÑú Ìò∏Ï∂ú) - ÏïàÏ†ÑÌïú Î≤ÑÏ†Ñ
  const handlePatientDischarge = async () => {
    try {
      console.log(`Î≥ëÏÉÅ ${selectedBed.name}Ïùò ÌôòÏûê Ìá¥Ïã§ Ï≤òÎ¶¨ ÏãúÏûë`);

      // ÏïàÏ†ÑÌïú Ï≤òÎ¶¨: Î∞±ÏóîÎìú API Ìò∏Ï∂ú Ï†úÍ±∞ (ÌôòÏûê ÏÉÅÌÉú Î≥ÄÍ≤Ω ÏóÜÏùå)
      // Í∏∞Ï°¥Ïùò disposition API Ìò∏Ï∂úÏùÑ Ï£ºÏÑùÏ≤òÎ¶¨ÌïòÏó¨ ÌôòÏûêÍ∞Ä Î™©Î°ùÏóêÏÑú ÏÇ¨ÎùºÏßÄÏßÄ ÏïäÎèÑÎ°ù Ìï®
      
      if (selectedBed.patient?.visitId) {
        await axios.post(
          `http://localhost:8081/api/visits/${selectedBed.patient.visitId}/disposition`,
          {
            disposition: 0,
            reason: `${selectedBed.name} Î≥ëÏÉÅÏóêÏÑú Ìá¥Ïã§ Ï≤òÎ¶¨`
          }
        );
      }


      console.log(`Î≥ëÏÉÅ ${selectedBed.name}Ïùò ÌôòÏûê Ìá¥Ïã§ Ï≤òÎ¶¨ ÏôÑÎ£å (Î°úÏª¨ Ï≤òÎ¶¨)`);

      // ÏïàÏ†ÑÌïú UI ÏóÖÎç∞Ïù¥Ìä∏ - Ìï¥Îãπ Î≥ëÏÉÅÏùÑ Îπà ÏÉÅÌÉúÎ°ú Î≥ÄÍ≤ΩÎßå
      setBedStatuses(prevStatuses => {
        const newStatuses = { ...prevStatuses };
        delete newStatuses[selectedBed.name]; // Ìï¥Îãπ Î≥ëÏÉÅ Îç∞Ïù¥ÌÑ∞ Ï†úÍ±∞ (Î≥ëÏÉÅÎßå ÎπÑÏõÄ)
        return newStatuses;
      });

      // ÌôòÏûê Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ® (ÌôòÏûêÎäî ÎåÄÍ∏∞ Î™©Î°ùÏúºÎ°ú Î≥µÍ∑Ä)
      await getWaitingPatients();

      // Î≥ëÏÉÅ ÏÉÅÌÉúÎèÑ ÏÉàÎ°úÍ≥†Ïπ® (ÏÑ†ÌÉùÏÇ¨Ìï≠)
      // await getBedStatuses();

    } catch (error) {
      console.error('Ìá¥Ïã§ Ï≤òÎ¶¨ Ïã§Ìå®:', error);
      alert('Ìá¥Ïã§ Ï≤òÎ¶¨Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    } finally {
      setShowDischargeModal(false);
      setSelectedBed(null);
    }
  };

  // Î™®Îã¨ Îã´Í∏∞
  const closeModal = () => {
    setShowPatientModal(false);
    setShowDischargeModal(false);
    setSelectedBed(null);
  };

  const baseBedLayouts = {
    // 1ÏÇ¨Î∂ÑÎ©¥ (BÍµ¨Ïó≠ - ICU)
    quadrant1: [
      { id: 'q1-1', name: 'B07', position: { row: 1, col: 1 } },
      { id: 'q1-2', name: 'B06', position: { row: 1, col: 2 } },
      { id: 'q1-3', name: 'B05', position: { row: 1, col: 3 } },
      { id: 'q1-4', name: 'B04', position: { row: 1, col: 4 } },
      { id: 'q1-5', name: 'B08', position: { row: 2, col: 1 } },
      { id: 'q1-6', name: 'B03', position: { row: 2, col: 4 } },
      { id: 'q1-7', name: 'B09', position: { row: 3, col: 1 } },
      { id: 'q1-8', name: 'B02', position: { row: 3, col: 4 } },
      { id: 'q1-9', name: 'B10', position: { row: 4, col: 1 } },
      { id: 'q1-10', name: 'B01', position: { row: 4, col: 4 } },
    ],

    // 2ÏÇ¨Î∂ÑÎ©¥ (AÍµ¨Ïó≠ - ÏùºÎ∞òÎ≥ëÎèô)
    quadrant2: [
      { id: 'q2-1', name: 'A07', position: { row: 1, col: 1 } },
      { id: 'q2-2', name: 'A06', position: { row: 1, col: 2 } },
      { id: 'q2-3', name: 'A05', position: { row: 1, col: 3 } },
      { id: 'q2-4', name: 'A04', position: { row: 1, col: 4 } },
      { id: 'q2-5', name: 'A08', position: { row: 2, col: 1 } },
      { id: 'q2-6', name: 'A03', position: { row: 2, col: 4 } },
      { id: 'q2-7', name: 'A09', position: { row: 3, col: 1 } },
      { id: 'q2-8', name: 'A02', position: { row: 3, col: 4 } },
      { id: 'q2-9', name: 'A10', position: { row: 4, col: 1 } },
      { id: 'q2-10', name: 'A01', position: { row: 4, col: 4 } }
    ],

    // 3ÏÇ¨Î∂ÑÎ©¥ (Í¥ÄÏ∞∞Ïã§/Í∏∞ÌÉÄ)
    quadrant3: [
      { id: 'q3-1', name: 'A11', position: { row: 1, col: 1 } },
      { id: 'q3-2', name: 'A12', position: { row: 2, col: 1 } },
      { id: 'q3-3', name: 'A13', position: { row: 3, col: 1 } },
      { id: 'q3-4', name: 'A14', position: { row: 4, col: 1 } },
      { id: 'q3-5', name: 'A15', position: { row: 4, col: 2 } },
      { id: 'q3-6', name: 'A16', position: { row: 4, col: 3 } },
      { id: 'q3-7', name: 'A17', position: { row: 4, col: 4 } },
      { id: 'q3-8', name: 'A18', position: { row: 4, col: 5 } }
    ],

    // 4ÏÇ¨Î∂ÑÎ©¥ (Îπà Í≥µÍ∞Ñ)
    quadrant4: []
  };

  // Î∞±ÏóîÎìú Îç∞Ïù¥ÌÑ∞Î•º Î≥ëÏÉÅ Î†àÏù¥ÏïÑÏõÉÏóê Ï†ÅÏö©ÌïòÎäî Ìï®Ïàò
  const applyBackendDataToQuadrants = (baseLayouts, bedStatuses) => {
    const result = {};

    Object.keys(baseLayouts).forEach(quadrantKey => {
      result[quadrantKey] = baseLayouts[quadrantKey].map(bed => {
        if (bed.name) {
          const bedData = bedStatuses[bed.name];
          return {
            ...bed,
            status: bedData ? bedData.status : 'empty',
            room: bedData ? bedData.patientName : ''
          };
        } else {
          return {
            ...bed,
            status: 'empty',
            room: ''
          };
        }
      });
    });

    return result;
  };

  // ÎèôÏ†ÅÏúºÎ°ú Î∞±ÏóîÎìú Îç∞Ïù¥ÌÑ∞Í∞Ä Ï†ÅÏö©Îêú Î≥ëÏÉÅ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
  const quadrantData = applyBackendDataToQuadrants(baseBedLayouts, bedStatuses);

  const getBedClassName = (status) => {
    const baseClass = 'emergency-bed-card';
    switch(status) {
      case 'red': return `${baseClass} emergency-bed-red`;
      case 'yellow': return `${baseClass} emergency-bed-yellow`;
      case 'green': return `${baseClass} emergency-bed-green`;
      case 'orange': return `${baseClass} emergency-bed-orange`;
      case 'empty': return `${baseClass} emergency-bed-empty`;
      default: return `${baseClass} emergency-bed-empty`;
    }
  };

  const BedCard = ({ bed }) => (
    <div 
      className={getBedClassName(bed.status)}
      onClick={() => handleBedClick(bed)}
      style={{ cursor: 'pointer' }}
    >
      {bed.name && (
        <div className="emergency-bed-content">
          <div className="emergency-bed-name">{bed.name}</div>
          <div className="emergency-bed-room">{bed.room}</div>
        </div>
      )}
    </div>
  );

  const Quadrant = ({ data, className }) => (
    <div className={`emergency-quadrant ${className}`}>
      {data.map(bed => (
        <div
          key={bed.id}
          className="emergency-bed-position"
          style={{
            gridRow: bed.position.row,
            gridColumn: bed.position.col
          }}
        >
          <BedCard bed={bed} />
        </div>
      ))}
    </div>
  );

  return (
    <div className="medical-dashboard emergency-page">
      <div className="dashboard-content">
        {!hideHeader && (
          <>
            <div className="header">
              <div className="header-content">
                <div className="header-left">
                  <div className="logo">
                    <span className="logo-text">MediFlow</span>
                  </div>
                  <div className="search-container">
                    <Search className="search-icon" />
                    <input
                      type="text"
                      placeholder="Search"
                      className="search-input"
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                    />
                  </div>
                </div>
                <div className="user-info">
                  <User className="user-icon" />
                  <span className="user-name">ÏùòÏÇ¨ Ïù¥ÎèÑÏùÄ</span>
                  <div className="logout-button">
                    <img src={logoutIcon} alt="logout" className="logout-icon" />
                    <span className="logout-text">Logout</span>
                  </div>
                </div>
              </div>
            </div>

            <div className="stats-grid">
              <div className="stat-card">
                <div className="stat-content">
                  <Users className="stat-icon blue" />
                  <div>
                    <div className="stat-number blue">29</div>
                  </div>
                </div>
              </div>
              

              <div className="stat-card">
                <div className="stat-content">
                  <Bed className="stat-icon blue" />
                  <div>
                    <div className="stat-number blue">19/28</div>
                  </div>
                </div>
              </div>
              
              <div className="stat-card stat-card-danger">
                <div className="stat-content">
                  <AlertCircle className="stat-icon red" />
                  <div className="stat-text">
                    <div className="stat-label">ÏúÑÌóò ÌôòÏûê</div>
                    <div className="stat-number red">6</div>
                  </div>
                </div>
              </div>

              <div className="stat-card stat-card-warning">
                <div className="stat-content">
                  <AlertTriangle className="stat-icon yellow" />
                  <div className="stat-text">
                    <div className="stat-label">Ï£ºÏùò ÌôòÏûê</div>
                    <div className="stat-number yellow">7</div>
                  </div>
                </div>
              </div>
            </div>
          </>
        )}

        <div className="emergency-room-container">
          <div className="emergency-room-layout">
            <div className="emergency-area-label emergency-area-label-a">AÍµ¨Ïó≠</div>
            <div className="emergency-area-label emergency-area-label-b">BÍµ¨Ïó≠</div>

            <Quadrant data={quadrantData.quadrant2} className="emergency-quadrant-2" />
            <Quadrant data={quadrantData.quadrant1} className="emergency-quadrant-1" />
            <Quadrant data={quadrantData.quadrant3} className="emergency-quadrant-3" />
            <Quadrant data={quadrantData.quadrant4} className="emergency-quadrant-4" />

            <div className="emergency-partition-wall"></div>
            <div className="emergency-entrance">
              <div className="emergency-entrance-text">Entrance</div>
            </div>
            <div className="emergency-nurse-station">
              <div className="emergency-nurse-station-text">Nurse Station</div>
            </div>
          </div>
        </div>

        {showPatientModal && (
          <EmergencyModal 

            bed={selectedBed}
            patients={waitingPatients}
            onAssign={handlePatientAssign}
            onClose={closeModal}
          />
        )}

        {showDischargeModal && (
          <DischargeModal 

            bed={selectedBed}
            onDischarge={handlePatientDischarge}
            onClose={closeModal}
          />
        )}
      </div>
    </div>
  );
};

export default EmergencyRoom;